version: "3"

networks:
  tier_0: ## Outside world
    # driver: "bridge"
    # ipam:
    #   config:
    #     - subnet: 172.16.0.0/12
    #     - gateway: 172.16.0.1
  tier_1: ## Inside proxy
    # driver: "bridge"
    # ipam:
    #   config:
    #     - subnet: 172.17.0.0/12
    #     - gateway: 172.17.0.1
  tier_log: ## Logging
    # driver: "bridge"
    # ipam:
    #   config:
    #     - subnet: 172.17.0.0/12
    #     - gateway: 172.17.0.1

volumes:
  nginx_:
  vhost_:
  certs_:
  letsencrypt_:

services:

  ###########
  ## PROXY ##
  ###########
  nginx:
    build: images/nginx
    container_name: $COMPOSE_PROJECT_NAME.nginx
    restart: unless-stopped
    labels:
        com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tier_0
      - tier_1
      - tier_log
    volumes:
      - vhost_:/etc/nginx/vhost.d
      - nginx_:/etc/nginx/conf.d
      - letsencrypt_:/usr/share/nginx/html
      - certs_:/etc/nginx/certs:ro

  dockergen: 
    build: images/dockergen
    container_name: $COMPOSE_PROJECT_NAME.dockergen
    restart: unless-stopped
    entrypoint: /usr/local/bin/docker-gen -notify-sighup $COMPOSE_PROJECT_NAME.nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    networks:
      - tier_1
      - tier_log
    volumes:
      - vhost_:/etc/nginx/vhost.d
      - nginx_:/etc/nginx/conf.d
      - letsencrypt_:/usr/share/nginx/html
      - certs_:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro

  letsencrypt:
    depends_on:
      - nginx
      - dockergen
    build: images/letsencrypt
    container_name: $COMPOSE_PROJECT_NAME.letsencrypt
    restart: unless-stopped
    networks:
      - tier_0
      - tier_1
      - tier_log
    volumes:
      - vhost_:/etc/nginx/vhost.d
      - nginx_:/etc/nginx/conf.d
      - letsencrypt_:/usr/share/nginx/html
      - certs_:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=$COMPOSE_PROJECT_NAME.dockergen
      - NGINX_PROXY_CONTAINER=$COMPOSE_PROJECT_NAME.nginx



  #############
  ## Logging ##
  #############
  logspout:
    container_name: $COMPOSE_PROJECT_NAME.logspout
    build: ./images/logspout
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - tier_log
    depends_on:
      - logstash
    restart: on-failure

  elasticsearch:
    container_name: $COMPOSE_PROJECT_NAME.elasticsearch
    build:
      context: ./images/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    env_file:
      - .env
    networks:
      - tier_log

  logstash:
    container_name: $COMPOSE_PROJECT_NAME.logstash
    build:
      context: ./images/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    env_file:
      - .env
    networks:
      - tier_log
    depends_on:
      - elasticsearch

  kibana:
    container_name: $COMPOSE_PROJECT_NAME.kibana
    build:
      context: ./images/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    ports:
      - "5601:5601"
    env_file:
      - .env
    networks:
      - tier_log
      - tier_0
    depends_on:
      - elasticsearch









